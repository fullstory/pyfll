#!/bin/sh -e

say() {
	echo "I: $@..."
}

get_efitarget() {
	if [ "$efitype" = "x86_64-efi" ] ; then
		efitarget="bootx64"
	elif [ "$efitype" = "i386-efi" ] ; then
		efitarget="bootia32"
	fi
}

do_postinst() {
	# Configure a default locale If only one locale was configured in the
	# build chroot, which is common, this avoids having to do so during boot.
	DEFAULT_LANG=$(locale -a | grep -vE '^(C|POSIX)' | head -n1)
	[ -n "${DEFAULT_LANG}" ] && /usr/share/fll-live-initscripts/fll_locales localize "${DEFAULT_LANG}"

	say 'Configuring console-setup'
	CHARMAP="UTF-8"
	CODESET="guess"
	# Debian agrees that Terminus doesn't look great enough to be default
	# http://bugs.debian.org/497331
	FONTFACE="VGA"
	# Keep the default size of 16 here to avoid clearing VT 1/2 way through
	# bootup sequence
	FONTSIZE="8x16"
	# write configuration: console-setup
	cat > /etc/default/console-setup <<EOF
ACTIVE_CONSOLES="/dev/tty[1-6]"
CHARMAP="${CHARMAP}"
CODESET="${CODESET}"
FONTFACE="${FONTFACE}"
FONTSIZE="${FONTSIZE}"
EOF

	DEBCONF=$(mktemp)
	cat >"${DEBCONF}" <<EOF
console-setup console-setup/charmap47 select ${CHARMAP}
console-setup console-setup/codesetcode string ${CODESET}
console-setup console-setup/fontface47 select ${FONTFACE}
console-setup console-setup/fontsize string ${FONTSIZE}
EOF
	debconf-set-selections < "${DEBCONF}"
	rm -f "${DEBCONF}"
	dpkg-reconfigure -fnoninteractive console-setup

	# remember keep service blacklists in sync with fll-installer!
	ENABLED_SERVICES="systemd-networkd systemd-resolved systemd-timesyncd"
	DISABLED_SERVICES="anacron cron bootlogd bootlogs stop-bootlogd stop-bootlogd-single systemd-networkd-wait-online NetworkManager-wait-online"
	REMOVED_SERVICES=""
	SERVICE_BLACKLIST="rsync ssh lirc mysql postfix"

	# enable services wanted on the live CD
	[ -n "${ENABLED_SERVICES}" ] && \
		say 'Enabling services'
	for service in ${ENABLED_SERVICES}; do
		if [ -x "/etc/init.d/${service}" ]; then
			update-rc.d "${service}" enable
		elif [ -f "/lib/systemd/system/${service}.service" ]; then
			systemctl enable "${service}.service"
		fi
	done

	# disable services not wanted on the live CD
	if [ -n "${DISABLED_SERVICES}" -o -n "${SERVICE_BLACKLIST}" ]; then
		say 'Disabling services'
	fi
	for service in ${DISABLED_SERVICES} ${SERVICE_BLACKLIST}; do
		if [ -x "/etc/init.d/${service}" ]; then
			update-rc.d "${service}" disable
		elif [ -f "/lib/systemd/system/${service}.service" ]; then
			systemctl disable "${service}.service"
		fi
	done

	# remove particularly nasty services, don't use!
	[ -n "${REMOVED_SERVICES}" ] && \
		say 'Masking services'
	for service in ${REMOVED_SERVICES}; do
		if [ -x "/etc/init.d/${service}" ]; then
			update-rc.d -f "${service}" remove
		elif [ -f "/lib/systemd/system/${service}.service" ]; then
			systemctl mask "${service}.service"
		fi
	done

	# truncate systemd machine-id to zero byte
	if [ -r /etc/machine-id ]; then
		say 'systemd: truncate /etc/machine-id'
		:>/etc/machine-id
	fi

	. /etc/default/distro
	unset GROUPS
	for g in ${FLL_LIVE_USER_GROUPS}; do
		if getent group ${g} >/dev/null; then
			[ -z "${GROUPS}" ] && GROUPS="${g}" || GROUPS="${GROUPS} ${g}"
		else
			say "Dropping group from FLL_LIVE_USER_GROUPS: ${g}"
			if [ -w /etc/calamares/modules/users.conf ]; then
				say "Removing ${g} from /etc/calamares/modules/users.conf"
				sed -i "/- ${g}/d" /etc/calamares/modules/users.conf
			fi
		fi
	done

	if [ -w /etc/adduser.conf ]; then
		say 'Preseeding /etc/adduser.conf'
		sed -i 's/^DIR_MODE=.*/DIR_MODE=0700/' /etc/adduser.conf

		sed -i "s#^FLL_LIVE_USER_GROUPS=.*#FLL_LIVE_USER_GROUPS=\"${GROUPS}\"#" \
			/etc/default/distro
		sed -i -e 's/^#\?\(EXTRA_GROUPS=\).*/\1"'"${GROUPS# }"'"/' \
			-e 's/^#\?\(ADD_EXTRA_GROUPS=\).*/\11/' \
			/etc/adduser.conf
	fi

	# create grub2 ElTorito support
	if which grub-mkimage >/dev/null; then
		say 'Creating grub2 El Torito image file'
		grub-mkimage -d /usr/lib/grub/i386-pc/ --prefix='/boot/grub' --format=i386-pc-eltorito -o /tmp/grub_eltorito biosdisk iso9660
		efitypes="x86_64-efi i386-efi"
		doefi=""
		for efitype in $efitypes ; do
			[ -d "/usr/lib/grub/${efitype}" ] && doefi="Y"
		done
		if [ -n "${doefi}" ] ; then
			say 'Creating grub-efi boot files'
			iso_uuid=$(cat /tmp/iso_uuid)
			mkdir /tmp/uuid
			touch /tmp/uuid/${iso_uuid}
			# create the memdisk image for cd booting
			memdisk_img=`mktemp "/tmp/tmp.XXXXXXXXXX"` || exit 1
			memdisk_dir=`mktemp -d "/tmp/tmp.XXXXXXXXXX"` || exit 1
			mkdir -p ${memdisk_dir}/boot/grub
			cat << EOF > ${memdisk_dir}/boot/grub/grub.cfg
search --fs-uuid --set=root ${iso_uuid}
set prefix=(\${root})/boot/grub
source \$prefix/grub.cfg
EOF
			(cd "${memdisk_dir}"; tar -cf - boot) > "${memdisk_img}"
			rm -rf ${memdisk_dir}
			mkdir -p /tmp/efi_img/efi/boot
			mkdir -p /tmp/efi/boot
			for efitype in $efitypes ; do
				if [ -d "/usr/lib/grub/$efitype" ] ; then
					get_efitarget
					grub-mkimage -O ${efitype} -m "${memdisk_img}" --prefix='(memdisk)/boot/grub' -o /tmp/efi_img/efi/boot/${efitarget}.efi search iso9660 configfile normal memdisk tar part_msdos part_gpt lvm fat ext2
					cp /tmp/efi_img/efi/boot/${efitarget}.efi /tmp/efi/boot/${efitarget}.efi
				fi
			done
		fi
	fi

	# preseed linux_cmdline_default
	say 'preseed linux_cmdline_default for grub2'
	echo grub-pc grub2/linux_cmdline_default string quiet systemd.show_status=1 splash | debconf-set-selections
	echo grub-efi-ia32 grub2/linux_cmdline_default string quiet systemd.show_status=1 splash | debconf-set-selections
	echo grub-efi-amd64 grub2/linux_cmdline_default string quiet systemd.show_status=1 splash | debconf-set-selections

	# preconfigure grub2
	if [ -w /etc/default/grub ]; then
		# set linux_cmdline_default
		if grep -q ^GRUB_CMDLINE_LINUX_DEFAULT\= /etc/default/grub; then
			sed -i "s/^\(GRUB_CMDLINE_LINUX_DEFAULT=\).*/\1\"quiet systemd.show_status=1 splash\"/" /etc/default/grub
		else
			sed -i "s/^\#\(GRUB_CMDLINE_LINUX_DEFAULT=\).*/\1\"quiet systemd.show_status=1 splash\"/" /etc/default/grub
		fi

		# disable recovery modes for grub2
		if grep -q ^GRUB_DISABLE_RECOVERY\= /etc/default/grub; then
			sed -i "s/^\(GRUB_DISABLE_RECOVERY=\).*/\1\"true\"/" /etc/default/grub
		else
			sed -i "s/^\#\(GRUB_DISABLE_RECOVERY=\).*/\1\"true\"/" /etc/default/grub
		fi

		# disable grub2 submenus and use plain menu structures instead
		if grep -qv ^GRUB_DISABLE_SUBMENU /etc/default/grub; then
			printf "\n# Disable linux kernel submenus\n" >> /etc/default/grub
			printf "GRUB_DISABLE_SUBMENU=true\n" >> /etc/default/grub
		fi

		# enable os-prober
		if grep -q '^#GRUB_DISABLE_OS_PROBER=false' /etc/default/grub; then
			sed -i 's/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/' /etc/default/grub
		else
			printf "\n# Enable otheros discovery\n" >> /etc/default/grub
			printf "GRUB_DISABLE_OS_PROBER=false\n" >> /etc/default/grub
		fi
	fi

	if [ -n "${FLL_GFXBOOT_THEME}" ] && \
	[ -r "/usr/share/grub/themes/${FLL_GFXBOOT_THEME}/theme.txt" ]; then
		if grep -q ^GRUB_THEME\= /etc/default/grub >/dev/null 2>&1; then
				sed -i "s|\(GRUB_THEME=\).*|\1/usr/share/grub/themes/${FLL_GFXBOOT_THEME}/theme.txt|" \
					/etc/default/grub
		else
			printf "\n# Set theme defined by FLL_GFXBOOT_THEME in /etc/default/distro\n" \
				>>/etc/default/grub
			printf "GRUB_THEME=\"/usr/share/grub/themes/${FLL_GFXBOOT_THEME}/theme.txt\"\n" \
				>>/etc/default/grub
		fi
	fi

	# initscripts defers creating the mtab symlink to the first boot,
	# create it here to avoid the creation warning.
	say 'Make mtab a symlink to /proc/mounts'
	if [ ! -L /etc/mtab ]; then
		rm -f /etc/mtab
		ln -sf /proc/mounts /etc/mtab
	fi
}

case "${1}" in
	postinst)
		do_postinst
		;;
	*)
		echo "Usage: ${0} postinst"
		;;
esac

:
