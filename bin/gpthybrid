#!/usr/bin/python3 -tt
# -*- coding: utf-8 -*-
#
# https://www.rodsbooks.com/gdisk/hybrid.html
#
__copyright__ = """
(C) 2014-2015 Niall Walsh <niallwalsh@celtux.org>
(C) 2024-2025 Kel Modderman <kelvmod@gmail.com>
"""
__license__   = 'GPLv2 or any later version'

from operator import itemgetter
import argparse
import shlex
import subprocess
import sys

SGDISK = '/usr/sbin/sgdisk'

def run_process(cmd, verbose=False):
    if verbose:
        print(f'# {shlex.join(cmd)}')
    try:
        with subprocess.Popen(cmd, stdout=subprocess.PIPE, encoding='utf-8') as proc:
            stdout = proc.stdout.read()
            if verbose:
                print(stdout)
            return stdout.split('\n')
    except FileNotFoundError as exc:
        print(
            f"Command {cmd} failed because the process "
            f"could not be found.\n{exc}"
        )
    except subprocess.CalledProcessError as exc:
        print(
            f"Command {cmd} failed because the process "
            f"did not return a successful return code.\n{exc}"
        )
    except subprocess.TimeoutExpired as exc:
        print(f"Command {cmd} timed out.\n {exc}")

if __name__ == '__main__':
    cli = argparse.ArgumentParser(description='GPT hybrid iso manipulator.')
    cli.add_argument('-i', '--iso', action='store',
                     type=str, metavar='<iso>', required=True,
                     help='Path to iso file.')
    cli.add_argument('-f', '--filesystems', nargs='+', metavar='<filesystem>',
                     required=True,
                     help='Paths to filesystems within iso file.')
    cli.add_argument('-v', '--verbose', action='store_true', default=False,
                     help='Show process output and extra informational data.')
    args = cli.parse_args()

    sgdisk_align = run_process([SGDISK, '--display-alignment',
                               args.iso], verbose=args.verbose)
    sgdisk_align = int(sgdisk_align[0])
    sgdisk_print = run_process([SGDISK, '--print', args.iso],
                               verbose=args.verbose)

    old_partitions = dict()
    for line in sgdisk_print:
        if not line.startswith('   '):
            continue
        num, start, end, size, unit, code = line.split()[:6]
        name = ' '.join(line.split()[6:])
        if args.verbose:
            print(
                f'num={num} start={start} end={end} size={size} unit={unit}'
                f' code={code} name={name}'
            )
        old_partitions[num] = {
            'start': start,
            'end': end,
            'size': size,
            'unit': unit,
            'code': code,
            'name': name
        }
    sgdisk_delete = [SGDISK, args.iso]
    for num in reversed(old_partitions.keys()):
        sgdisk_delete.insert(1, f'--delete={num}')
    run_process(sgdisk_delete, verbose=args.verbose)

    osirrox = ['osirrox', '-pkt_output', 'on', '-indev', args.iso]
    for fs in args.filesystems:
        osirrox.extend(['-find', fs, '-exec', 'report_sections', '--'])
    osirrox_report = run_process(osirrox, verbose=args.verbose)

    filesystems = dict()
    for line in osirrox_report:
        if not line.startswith('R:1: File data lba:  '):
            continue
        xt, startlba, blocks, sectsize, name = line[21:].split(',')
        xt = int(xt.strip())
        startlba = int(startlba.strip())
        blocks = int(blocks.strip())
        sectsize = int(sectsize.strip())
        name = name.strip().strip("'")
        if name in filesystems:
            filesystems[name] = {
                'xt': f'{filesystems[name]["xt"]}+{xt}',
                'startlba': filesystems[name]["startlba"],
                'blocks': filesystems[name]["blocks"] + blocks,
                'sectsize': filesystems[name]["sectsize"] + sectsize,
                'name': name
            }
        else:
            filesystems[name] = {
                'xt': xt,
                'startlba': startlba,
                'blocks': blocks,
                'sectsize': sectsize,
                'name': name
            }
        if args.verbose:
            print(
                f'xt={filesystems[name]["xt"]}'
                f' startlba={filesystems[name]["startlba"]}'
                f' blocks={filesystems[name]["blocks"]} '
                f' sectsize={filesystems[name]["sectsize"]}'
                f' name={name}'
            )

    gap = 0
    num = 0
    for fs in sorted(list(filesystems.values()), key=itemgetter('startlba')):
        num += 1
        first = run_process([SGDISK,
                             f'--set-alignment={sgdisk_align}',
                             '--first-aligned-in-largest', args.iso],
                            verbose=args.verbose)[0]
        start = fs['startlba'] * 4
        run_process([SGDISK, '--align-end',
                    f'--set-alignment={sgdisk_align}',
                    f'--new={num}:{first}:{start - 1}',
                    f'--change-name={num}:Gap{gap}',
                    f'--typecode={num}:0700', args.iso],
                    verbose=args.verbose)
        gap += 1
        num += 1
        if fs['name'] == 'efi.img':
            fs_name = 'EFI boot partition'
            fs_type = 'ef00'
        elif fs['name'].endswith('.ef02'):
            fs_name = 'BIOS boot partition'
            fs_type = 'ef02'
        else:
            fs_name = fs['name'].split('.')[1]
            fs_type = '8300'
        run_process([SGDISK, '--align-end',
                     f'--set-alignment={sgdisk_align}',
                     f'--new={num}:{start}:+{fs["sectsize"] / 1024}KiB',
                     f'--change-name={num}:{fs_name}',
                     f'--typecode={num}:{fs_type}', args.iso],
                    verbose=args.verbose)

    first = run_process([SGDISK, f'--set-alignment={sgdisk_align}',
                         '--first-aligned-in-largest',
                         args.iso], verbose=args.verbose)[0]
    num += 1
    run_process([SGDISK, '--align-end',
                 f'--set-alignment={sgdisk_align}', f'--new={num}:{first}:',
                 f'--change-name={num}:Gap{gap}', f'--typecode={num}:0700',
                 args.iso], verbose=args.verbose)

    run_process([SGDISK, '--move-second-header', args.iso], verbose=args.verbose)
    run_process([SGDISK, '--print', args.iso], verbose=args.verbose)
    run_process([SGDISK, '--verify', args.iso], verbose=args.verbose)
