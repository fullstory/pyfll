#!/usr/bin/python3 -tt
# -*- coding: utf-8 -*-

import subprocess
import sys
from optparse import OptionParser

def modup(number, mod, target):
    if (number % mod != target):
        number = number + target - number % mod
    return number

def moddown(number, mod, target):
    if (number % mod != target):
        adjust = number % mod - target
        if (adjust > 0):
            number -= adjust
        else:
            number -= mod + adjust
    return number

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-l', '--label', dest='l', default='',
                      help='set the partlabel stem for rootfs partitions')
    parser.add_option('-i', '--iso', dest='i',
                      help='name of the iso to gpthybridise')
    parser.add_option('-s', '--sector', dest='s', default=4,
                      help='size of sectors to use in resulting partition table')
    parser.add_option('-v', '--verbose', dest='v', default=False,
                      action='store_true',
                      help='show process output and extra informational data')
    (options, args) = parser.parse_args()

    iso_file = options.i
    label = options.l
    sectors = options.s
    verbose = options.v

    buffout = 'I: gpthybrid: manipulating iso %s' % iso_file
    if len(label):
        buffout = '%s with label %s' % (buffout, label)
    print(buffout)

    # extract start and end of space to partition from existing gpt
    try:
        gdisk = subprocess.run(['/usr/sbin/gdisk', '-l', iso_file],
                               check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print('E: gdisk failed to process %s' % iso_file)
        sys.exit(gdisk.returncode)
    finally:
        if verbose:
            print(gdisk.stdout.decode())

    last = 0
    end = 0
    partitions = 0
    for old_part in gdisk.stdout.decode().split('\n'):
        if old_part.startswith('   1'):
            # below we want last as 'end' of space before 1st partiion
            last = int(old_part.split()[1]) - 1
            # min 63 and round up to %sectors==sectors-1 (so 63 means next starts on 64)
            if last < 63:
                last=63
            last = modup(last, sectors, sectors - 1)
            if verbose:
                print('I: gpthybrid: first partition set last to %i' % last)
        if old_part.startswith('   '):
            # end should be the last used sector
            testend = int(old_part.split()[2])
            if (testend > end):
                end = modup(testend,sectors,sectors - 1)
                if verbose:
                    print('I: gpthybrid: got partition ending: %i' % end)
            partitions += 1

    # get the lba addresses of the files using osirrox
    parts = list()
    osirrox_cmd = ['/usr/bin/osirrox', '-pkt_output', 'on',
                   '-indev', iso_file, '-logfile', '.', '-']

    for arg in args:
        osirrox_cmd.extend(['-find', arg, '-exec', 'report_lba', '--'])

    if verbose:
        print('I: gpthybrid: %s' % ' '.join(osirrox_cmd))

    try:
        osirrox = subprocess.run(osirrox_cmd, check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print('E: osirrox failed to process %s' % iso_file)
        sys.exit(osirrox.returncode)
    finally:
        if verbose:
            print(osirrox.stdout.decode())

    for line in osirrox.stdout.decode().split('\n'):
        if line[:22] == 'R:1: File data lba:  0':
            # extract the fields
            (xt, startlba, blocks, filesize, name) = line.split(',')
            # osirrox talks in 2048b sectors so *4
            startlba = int(startlba.split()[0]) * 4
            blocks = int(blocks.split()[0]) * 4
            # drop the quotes around the name
            name = name.split()[0].split("'")[1]
            # rebuild list in post in order
            done = 0
            post = list()
            for part in (parts):
                if startlba < int(part.split()[0]):
                    # we start before this part
                    if done == 0:
                        # add ourselves if not done
                        post.append('%s %s %s' % (moddown(startlba, sectors, 0),
                                                  modup(startlba + blocks - 1,
                                                        sectors, 3), name))
                        done = 1
                post.append(part)
            if done == 0:
                # no parts for us to go before so add to the end
                post.append('%s %s %s' % (moddown(startlba, sectors, 0),
                                          modup(startlba + blocks - 1,
                                                sectors, 3), name))
            parts = post

    # delete the existing partitions
    sgdisk_cmd = ['/usr/sbin/sgdisk']
    for part in range(partitions, 0, -1):
        sgdisk_cmd.append('--delete=%i' % part)

    # gdisk commands to create the partitions
    # set sectors alignment (2048b iso sector size by default) for partition creation
    sgdisk_cmd.append('--set-alignment=%i' % sectors)
    # gap and pnum just count
    gap = 0
    pnum = 1
    for part in parts:
        (start, end, name) = part.split()
        # default to ms basic partition and no custom partname
        typecode = '0700'
        pname=''
        if len(name) > 4 and (name[-6:] == '.amd64' or name[-4:] == '.686' or \
            name[-2:] == '.2'):
            typecode = '8300'
            # use label.extension or just the filename as the partlabel
            if len(label)==0:
                pname = '%s' % name
            else:
                pname = '%s.%s' % (label, name[name.rfind('.') + 1:])
        elif len(name) > 6 and name[-7:] == 'efi.img':
            typecode = 'ef00'
            pname = 'EFI system partition'
        elif len(name) >5 and name[-5:] == '.ef02':
            typecode = 'ef02'
            pname = 'BIOS Boot Partition'
        # if the last partition ended more then sectors less then this starts
        if int(start)-last >= sectors:
            sgdisk_cmd.append('--new=%i:%i:%i' % \
                (pnum, modup(last + 1, sectors, 0),
                 moddown(int(start)-1, sectors, 3)))
            sgdisk_cmd.append('--typecode=%i:0700' % pnum)
            sgdisk_cmd.append('--change-name=%i:Gap%i' % (pnum, gap))
            pnum += 1
            gap += 1
        # create the partition itself
        sgdisk_cmd.append('--new=%i:%i:%i' % (pnum, int(start), int(end)))
        sgdisk_cmd.append('--typecode=%i:%s' % (pnum, typecode))
        if len(pname) > 0:
            sgdisk_cmd.append('--change-name=%i:%s' % (pnum, pname))
        pnum += 1
        last = int(end)

    # create a gap from end of last partition to fill the remaining free space
    sgdisk_cmd.append('--new=%i:%i:0' % (pnum, modup(last + 1, sectors, 0)))
    sgdisk_cmd.append('--typecode=%i:0700' % pnum)
    sgdisk_cmd.append('--change-name=%i:Gap%i' % (pnum, gap))

    sgdisk_cmd.append(iso_file)
    if verbose:
        print('I: gpthybrid: %s' % ' '.join(sgdisk_cmd))

    try:
        sgdisk = subprocess.run(sgdisk_cmd, check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print('E: gpthybrid failed to hybridise %s' % iso_file)
    finally:
        print(sgdisk.stdout.decode())

    try:
        gdisk = subprocess.run(['/usr/sbin/gdisk', '-l', iso_file],
                               check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print('E: gdisk failed to process %s' % iso_file)
        sys.exit(gdisk.returncode)
    finally:
        if verbose:
            print(gdisk.stdout.decode())

    sys.exit(sgdisk.returncode)
