#!/usr/bin/python3 -tt
# -*- coding: utf-8 -*-

import subprocess
from optparse import OptionParser

parser = OptionParser()
parser.add_option("-l", "--label", dest="l", default="", help="set the partlabel stem for rootfs partitions")
parser.add_option("-i", "--iso", dest="i", help="name of the iso to gpthybridise")
parser.add_option("-s", "--sector", dest="s", default=4, help="size of sectors to use in resulting partition table")
(options, args) = parser.parse_args()

iso_file = options.i
label = options.l
sectors = options.s

def modup(number,mod,target):
	if (number % mod != target):
		number = number + target - number % mod
	return number
def moddown(number,mod,target):
	if (number % mod != target):
		adjust = number % mod - target
		if (adjust > 0):
			number -= adjust
		else:
			number -= mod + adjust
	return number

buffout = "gpthybridising iso %s" % iso_file
if len(label):
	buffout = "%s with label %s" % (buffout, label)
print(buffout)

# extract start and end of space to partition from existing gpt
gdisks = subprocess.Popen(["/usr/sbin/gdisk","-l",iso_file],stdout=subprocess.PIPE).communicate()[0].decode()
last = 0
end = 0
partitions = 0
for old_part in gdisks.split("\n"):
	if old_part.startswith('   1'):
		# below we want last as "end" of space before 1st partiion
		last = int(old_part.split()[1])-1
		# min 63 and round up to %sectors==sectors-1 (so 63 means next starts on 64)
		if last<63:
			last=63
		last = modup(last,sectors,sectors-1)
		print("first partition set last to %i" % last)
	if old_part.startswith('   '):
		# end should be the last used sector
		testend = int(old_part.split()[2])
		if (testend > end):
			end = modup(testend,sectors,sectors-1)
			print("got partition ending: %i" % end)
		partitions += 1

# get the lba addresses of the files using osirrox
parts = list()
osirrox = ['/usr/bin/osirrox', '-pkt_output', 'on',
           '-indev', iso_file, '-logfile', '.', '-']

for arg in args:
    osirrox.extend(['-find', arg, '-exec', 'report_lba', '--'])

print("running: %s" % " ".join(osirrox))
for line in subprocess.check_output(osirrox).decode().split("\n"):
	if line[:22] == 'R:1: File data lba:  0':
		# extract the fields
		(t, s, b, f, n) = line.split(',')
		# osirrox talks in 2048b sectors so *4
		s = int(s.split()[0])*4
		b = int(b.split()[0])*4
		# drop the quotes around the name
		n = n.split()[0].split("'")[1]
		# rebuild list in post in order
		done = 0
		post = list()
		for part in (parts):
			if s < int(part.split()[0]):
				# we start before this part
				if done == 0:
					# add ourselves if not done
					post.append("%s %s %s" % (moddown(s,sectors,0), modup(s+b-1,sectors,3), n))
					done = 1
			post.append(part)
		if done == 0:
			# no parts for us to go before so add to the end
			post.append("%s %s %s" % (moddown(s,sectors,0), modup(s+b-1,sectors,3), n))
		parts = post

# delete the existing partitions
cmd = ['/usr/sbin/sgdisk']
for part in range(partitions, 0, -1):
    cmd.append('--delete=%i' % part)

# gdisk commands to create the partitions
# set sectors alignment (2048b iso sector size by default) for partition creation
cmd.append('--set-alignment=%i' % sectors)
# gap and pnum just count
gap = 1
pnum = 1
for part in parts:
    (start, end, name) = part.split()
    # default to ms basic partition and no custom partname
    typecode = '0700'
    pname=''
    if len(name) > 4 and (name[-6:] == '.amd64' or name[-4:] == '.686' or name[-2:] == '.2'):
        typecode = '8300'
        # use label.extension or just the filename as the partlabel
        if len(label)==0:
            pname = '%s' % name
        else:
            pname = '%s.%s' % (label, name[name.rfind('.')+1:])
    elif len(name) > 6 and name[-7:] == 'efi.img':
        typecode = 'ef00'
        pname = 'EFI system partition'
    elif len(name) >5 and name[-5:] == '.ef02':
        typecode = 'ef02'
        pname = 'BIOS Boot Partition'
    # if the last partition ended more then sectors less then this starts
    if int(start)-last >= sectors:
        cmd.append('--new=%i:%i:%i' % (pnum, modup(last+1, sectors, 0), moddown(int(start)-1, sectors, 3)))
        cmd.append('--typecode=%i:0700' % pnum)
        cmd.append('--change-name=%i:Gap%i' % (pnum, gap))
        pnum += 1
        gap += 1
    # create the partition itself
    cmd.append('--new=%i:%i:%i' % (pnum, int(start), int(end)))
    cmd.append('--typecode=%i:%s' % (pnum, typecode))
    if len(pname) > 0:
        cmd.append('--change-name=%i:%s' % (pnum, pname))
    pnum += 1
    last = int(end)

# create a gap from end of last partition and end of last gap if needed
if (int(end)-last > sectors-1):
    cmd.append('--new=%i:%i:0' % (pnum, modup(last+1, sectors, 0)))
    cmd.append('--typecode=%i:0700' % pnum)
    cmd.append('--change-name=%i:Gap%i' % (pnum, gap))

cmd.append(iso_file)
print(' '.join(cmd))
sgdisk = subprocess.run(cmd, check=True, capture_output=True)
print(sgdisk.stdout.decode())
